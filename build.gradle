import com.matyrobbrt.gradle.jarinjar.task.*
import com.matyrobbrt.gradle.jarinjar.transform.ForgeManifestFixerTransformer

plugins {
    id 'groovy'
    id 'maven-publish'
    id 'org.cadixdev.licenser' version '0.6.1'
    id 'com.matyrobbrt.jarinjar' version '1.0.0'
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'com.github.johnrengelman.shadow' version '7.1.2' apply false
}

archivesBaseName = 'gml'
group = 'com.matyrobbrt.gml'

project.ext.groovyLibs = [
        'stdlib', 'contracts', 'datetime',
        'nio', 'macro', 'macro-library',
        'templates', 'typecheckers',

        'dateutil', 'ginq',

        'toml', 'json'
]
project.ext.manifestAttr = [
        'Specification-Title'   : 'GroovyModLoader',
        'Specification-Vendor'  : 'GroovyMC',
        'Specification-Version' : 1,
        'Implementation-Title'  : project.name,
        'Implementation-Version': project.version,
        'Implementation-Vendor' : 'GroovyMC',
        'BundledGroovyVersion'  : project.groovy_version,
        'GitCommit'             : getGitCommit(),
        'FMLModType'            : 'LANGPROVIDER',
        'Built-on-Minecraft'    : project.mc_version
]

apply from: 'gradle/projectSetup.gradle'
apply from: 'gradle/mdg.gradle'
apply from: 'gradle/jars.gradle'
apply from: 'gradle/compiler.gradle'

tasks.register('fullJar', ForgeJarInJarTask)
tasks.register('jijtestJar', ForgeJarInJarTask)
apply from: 'gradle/minecraft.gradle'
apply from: 'gradle/publishing.gradle'

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

allprojects {
    afterEvaluate {
        license {
            header = rootProject.file('license-header.txt')
            exclude('**/mods.groovy')
        }
    }
}

repositories {
    maven {
        name = 'Modding Inquisition Snapshots'
        url = 'https://maven.moddinginquisition.org/snapshots'
    }
    maven {
        name = 'Modding Inquisition Releases'
        url = 'https://maven.moddinginquisition.org/releases'
    }
}

jij.onConfiguration('groovy') {
    final manifestFix = new ForgeManifestFixerTransformer(modType: 'LIBRARY', modulePrefix: 'com.matyrobbrt.gml.groovyjij')
    eachMatching('.+') {
        versionRange nextMajor
        transform manifestFix
    }
}

jij.onConfiguration('modsDotGroovy') {
    eachMatching('.+') {
        path = 'mdg-dsl.jar'
        includeMetadata = false
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

    project.ext.groovyLibs.each {
        groovy groovyDep(it as String)
    }

    transformCompileOnly sourceSets.main.output

    testCompileOnly sourceSets.main.output
    testCompileOnly modsDotGroovy.mdgDsl()

    modCompileOnly sourceSets.main.output

    compileOnly 'com.matyrobbrt.enhancedgroovy:dsl:0.2.0'
    include("io.github.groovymc.cgl:cgl-${mc_version}-forge:${cgl_version}") {
        jij.onDependency(it as Dependency) {
            versionRange nextMajor
        }
    }
}

String groovyDep(final String name) {
    return "${groovyId(name)}:${project.groovy_version}"
}

static String groovyId(final String name) {
    return "org.apache.groovy:groovy${name == 'stdlib' ? '' : '-' + name}"
}

tasks.register('makeReadme', Copy) {
    final groovyLibsAsString = project.ext.groovyLibs.join(', ')
    final expands = [
            'groovyVersion': project.groovy_version,
            'groovyLibs'   : groovyLibsAsString,

            'gmlVersion'   : '${gmlVersion}', // Thanks Gradle...
            'header'       : '<!-- This file is automatically generated, make any modifications to it in the `templates/README.MD` file, and then run the `makeReadme` Gradle task -->'
    ]
    it.inputs.properties expands

    it.from('templates/README.MD') {
        expand expands
    }
    it.destinationDir(project.rootDir)
}

tasks.register('groovyJar', ForgeJarInJarTask) {
    group('build')
    archiveBaseName.set('groovy-fat')
    fromConfiguration(project.configurations.groovy)
    manifest.attributes(manifestAttr + [
            'Specification-Title': 'GML-GroovyFatJar',
            'Automatic-Module-Name': 'com.matyrobbrt.gml.groovyjij'
    ])
}

tasks.named('fullJar', ForgeJarInJarTask).configure {
    from(sourceSets.main.output)
    from(sourceSets.transform.output)
    from(sourceSets.extension.output)
    manifest.attributes(manifestAttr + [
            'Automatic-Module-Name': 'com.matyrobbrt.gml', 'FMLModType': 'LANGPROVIDER'
    ])
    archiveClassifier.set('all')
    group('build')

    fromJar(tasks.named('modJar')) { versionRange nextMajor }
    fromJar(tasks.named('groovyJar')) { versionRange nextMajor }
    fromConfiguration(project.configurations.include)
    fromConfiguration(project.configurations.modsDotGroovy)

    tasks.build.dependsOn(it)
}
project(':script-mods').afterEvaluate {
    rootProject.tasks.named('fullJar', ForgeJarInJarTask) {
        fromJar(project(':script-mods').tasks.shadowJar as org.gradle.jvm.tasks.Jar) { versionRange nextMajor }
    }
}

tasks.named('jijtestJar', ForgeJarInJarTask).configure {
    archiveBaseName.set('jijtest')
    fromJar(tasks.named('fullJar'))
    manifest.attributes([
            'Implementation-Version': project.version,
            'Automatic-Module-Name' : 'com.matyrobbrt.gml.jijtest',
            'FMLModType'            : 'LANGPROVIDER'
    ])
}

static String getGitCommit() {
    final proc = 'git rev-parse --short HEAD'.execute()
    proc.waitFor()
    return proc.exitValue() ? "ERROR(${proc.exitValue()})" : proc.text.trim()
}