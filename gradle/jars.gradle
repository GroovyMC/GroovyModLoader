tasks.register('modJar', Jar) {
    from sourceSets.mod.output
    manifest.attributes(manifestAttr - ['FMLModType': 'LANGPROVIDER'])
    archiveBaseName.set('mod')
}

tasks.named('jar', Jar).configure {
    from sourceSets.extension.output
    manifest.attributes(manifestAttr + [
            'Automatic-Module-Name': 'com.matyrobbrt.gml', 'FMLModType': 'LANGPROVIDER'
    ])
}
java.withSourcesJar()

groovydoc {
    use = true
    source(sourceSets.transform.allSource)
    source(sourceSets.extension.allSource)
}

tasks.register('groovydocJar', Jar) {
    classifier 'javadoc'
    from groovydoc.destinationDir
    dependsOn(groovydoc)
}

final transformDest = new File(buildDir, 'libs/transform')
final transformAttr = manifestAttr + [
        'Specification-Title': 'GML-Transform'
]
tasks.register('transformJar', Jar) {
    from sourceSets.transform.output
    manifest.attributes(transformAttr)
    archiveBaseName.set('transform')
    destinationDirectory.set(transformDest)
}

tasks.register('transformSources', Jar) {
    from sourceSets.transform.allSource
    manifest.attributes(transformAttr)
    archiveBaseName.set('transform')
    archiveClassifier.set('sources')
    destinationDirectory.set(transformDest)
}

tasks.register('testJar', Jar) {
    group 'build'
    from sourceSets.test.output
    classifier 'test'
    manifest.attributes([
            'Specification-Title': 'GMLTestMod',
            'Specification-Vendor': 'Matyrobbrt',
            'Specification-Version': '1',
            'Implementation-Title': 'GMLTestMod',
            'Implementation-Version': '1.0',
            'Implementation-Vendor': 'Matyrobbrt'
    ])
}